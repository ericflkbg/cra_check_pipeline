pipeline {
    agent any

    environment {
        DOCKER_NETWORK = "jenkins"
        NEXUS_DB_NAME = "nexus-db"
        NEXUS_DB_PORT = "5433"
        NEXUS_DB_VOLUME = "nexus-db"
        NEXUS_NAME = "nexus"
        NEXUS_PORT = "8081"
        NEXUS_URL = "http://${NEXUS_NAME}:${NEXUS_PORT}/service/rest/v1/status"
        TRIVY_SERVER_NAME = "trivy-server"
        TRIVY_SERVER_PORT = "4954"
        TRIVY_SERVER_URL = "http://${TRIVY_SERVER_NAME}:${TRIVY_SERVER_PORT}"
    }

    stages {
        stage('Start Nexus Database') {
            steps {
                script {
                    echo "Checking if Nexus Database is already running..."
                    def dbRunning = sh(script: "docker ps -q -f name=${NEXUS_DB_NAME}", returnStdout: true).trim()

                    if (!dbRunning) {
                        echo "Starting Nexus Database container..."
                        sh """
                        docker stop ${NEXUS_DB_NAME} || true
                        docker rm ${NEXUS_DB_NAME} || true
                        docker run -d --name ${NEXUS_DB_NAME} --network ${DOCKER_NETWORK} \
                        -p ${NEXUS_DB_PORT}:5432 \
                        -e POSTGRES_USER=nexus \
                        -e POSTGRES_PASSWORD=nexus \
                        -e POSTGRES_DB=nexus \
                        -v ${NEXUS_DB_VOLUME}:/var/lib/postgresql/data \
                        postgres:13
                        """
                        sleep 60
                    } else {
                        echo "Nexus Database is already running!"
                    }

                    echo "Checking Nexus Database health..."
                    sh "docker exec ${NEXUS_DB_NAME} pg_isready -U nexus || (echo 'Nexus Database health check failed!' && exit 1)"
                }
            }
        }

        stage('Start Nexus') {
            steps {
                script {
                    echo "Starting Nexus container..."
                    sh """
                    docker run -d --name ${NEXUS_NAME} --network ${DOCKER_NETWORK} \
                    -p ${NEXUS_PORT}:8081 \
                    -v nexus-data:/nexus-data \
                    sonatype/nexus3
                    """
                    sleep 120 // Erh√∂hen der Wartezeit auf 120 Sekunden
                }
            }
        }

        stage('Wait for Nexus') {
            steps {
                script {
                    echo "Waiting for Nexus to become available..."
                    timeout(time: 180, unit: 'SECONDS') { // Warte maximal 3 Minuten
                        waitUntil {
                            def response = sh(script: "curl -s -o /dev/null -w '%{http_code}' ${NEXUS_URL}", returnStdout: true).trim()
                            echo "Nexus Health Check Status: ${response}"
                            return response == "200"
                        }
                    }
                }
            }
        }

        stage('Start Trivy Server') {
            steps {
                script {
                    echo "Checking if Trivy server is already running..."
                    def isRunning = sh(script: "docker ps -q -f name=${TRIVY_SERVER_NAME}", returnStdout: true).trim()

                    if (!isRunning) {
                        echo "Starting Trivy server..."
                        sh """
                        docker stop ${TRIVY_SERVER_NAME} || true
                        docker rm ${TRIVY_SERVER_NAME} || true
                        docker run -d --name ${TRIVY_SERVER_NAME} --network ${DOCKER_NETWORK} \
                        -v /var/lib/trivy:/root/.cache/trivy \
                        -p ${TRIVY_SERVER_PORT}:${TRIVY_SERVER_PORT} \
                        aquasec/trivy server --listen 0.0.0.0:${TRIVY_SERVER_PORT}
                        """
                        sleep 10
                    } else {
                        echo "Trivy server is already running!"
                    }

                    echo "Checking Trivy server health..."
                    sh "curl -s ${TRIVY_SERVER_URL}/healthz || (echo 'Trivy server health check failed!' && exit 1)"
                }
            }
        }
    }

    post {
        always {
            echo "Nexus, Nexus-DB & Trivy Setup abgeschlossen!"
        }
        failure {
            echo "Fehler beim Starten der Dienste!"
        }
    }
}
