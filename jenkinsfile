pipeline {
    agent any  

    environment {
        IMAGE_NAME = "openplc"
        IMAGE_TAG = "latest"
        TRIVY_SERVER = "http://172.18.0.4:4954"
        NEXUS_REPO = "myregistry.local/docker-repo" // Korrigierte URL der Nexus-Registry
        NEXUS_URL = "https://myregistry.local" // URL f√ºr das Hochladen der Trivy-Ergebnisse
        MONITORING_NETWORK = "monitoring-net"
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'master', url: 'https://github.com/ericflkbg/OpenPLC_v3.git'
                sh 'ls -la'
            }
        }

        stage('Lint Dockerfile') {
            steps {
                script {
                    echo "Checking if Dockerfile exists..."
                    sh 'ls -la Dockerfile || echo "Dockerfile not found!"'

                    echo "Running Hadolint to check Dockerfile..."
                    sh '[ -f Dockerfile ] && docker run --rm -i hadolint/hadolint < Dockerfile || echo "No Dockerfile found, skipping Hadolint."'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
            }
        }

        stage('Scan Docker Image & Upload Results') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: '7211db4a-9c31-434c-8a12-44e0667143fb', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                        sh """
                        mkdir -p \$(pwd)/trivy_scan

                        docker run --rm --network jenkins \
                        -v /var/run/docker.sock:/var/run/docker.sock \
                        -v \$(pwd)/trivy_scan:/workspace aquasec/trivy image --server ${TRIVY_SERVER} \
                        --format json --output /workspace/trivy-results.json 
                        --severity HIGH,CRITICAL ${IMAGE_NAME}:${IMAGE_TAG}

                        ls -la \$(pwd)/trivy_scan

                        curl -k -u \$NEXUS_USER:\$NEXUS_PASS --upload-file trivy_scan/trivy-results.json \
                        ${NEXUS_URL}/trivy-results/trivy-results-\$(date +%Y%m%d%H%M%S).json
                        """
                    }
                }
            }
        }

        stage('Deploy OpenPLC for Testing') {
            steps {
                script {
                    echo "Starting OpenPLC (local build)..."
                    sh '''
                    docker stop openplc || true
                    docker rm openplc || true
                    docker run -d --name openplc --network=${MONITORING_NETWORK} -p 9090:8080 ${IMAGE_NAME}:${IMAGE_TAG}
                    sleep 10  # Warten, bis OpenPLC gestartet ist
                    '''
                }
            }
        }

        stage('Run OWASP ZAP DAST Scan') {
            steps {
                script {
                    echo "Starting OWASP ZAP Security Scan..."
                    sh '''
                    docker run --rm --network=${MONITORING_NETWORK} \
                      -v $(pwd):/zap/wrk \
                      ghcr.io/zaproxy/zaproxy:stable \
                      zap-baseline.py -t http://openplc:8080 -r /zap/wrk/zap-report.html || true
                    '''
                }
            }
        }

        stage('Cleanup OpenPLC') {
            steps {
                script {
                    echo "Stopping and Removing OpenPLC..."
                    sh '''
                    docker stop openplc || true
                    docker rm openplc || true
                    '''
                }
            }
        }

        stage('Push Docker Image to Nexus') {
            steps {
                script {
                    sh "docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${NEXUS_REPO}/${IMAGE_NAME}:${IMAGE_TAG}"

                    withCredentials([usernamePassword(credentialsId: '7211db4a-9c31-434c-8a12-44e0667143fb', passwordVariable: 'NEXUS_PASSWORD', usernameVariable: 'NEXUS_USERNAME')]) {
                        sh """
                        echo ${NEXUS_PASSWORD} | docker login ${NEXUS_REPO} -u ${NEXUS_USERNAME} --password-stdin
                        """
                    }

                    sh "docker push ${NEXUS_REPO}/${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }

        stage('Deploy OpenPLC') {
            steps {
                script {
                    echo "Starting OpenPLC in production network..."
                    sh '''
                    docker stop openplc || true
                    docker rm openplc || true
                    docker run -d --name openplc --network=live-network -p 9090:8080 \
                      ${NEXUS_REPO}/${IMAGE_NAME}:${IMAGE_TAG}
                    '''
                }
            }
        }

        stage('Deploy Prometheus') {
            steps {
                script {
                    echo "Starting Prometheus in production network..."
                    sh '''
                    docker stop prometheus || true
                    docker rm prometheus || true
                    docker run -d --name prometheus --network=live-network \
                      -p 9091:9090 -v /var/jenkins_home/workspace/cra_check_pipeline/prometheus:/etc/prometheus \
                      prom/prometheus
                    '''
                }
            }
        }

        stage('Deploy Grafana') {
            steps {
                script {
                    echo "Starting Grafana in production network..."
                    sh '''
                    docker stop grafana || true
                    docker rm grafana || true
                    docker run -d --name grafana --network=live-network \
                      -p 3000:3000 grafana/grafana
                    '''
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline abgeschlossen!"
        }
        failure {
            echo "Pipeline fehlgeschlagen!"
        }
    }
}